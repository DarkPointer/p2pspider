<!DOCTYPE html>
<html lang="en">
  <%- include('includes/header') %>
  <body class="bg-gradient-to-br from-gray-50 to-gray-100 min-h-screen flex flex-col">
    <%- include('includes/navbar') %>
    
    <main class="flex-grow animate-fadeIn">
      <div class="container mx-auto px-4 py-8 md:py-12">
        <div class="max-w-5xl mx-auto">
          <div class="bg-white rounded-xl shadow-elegant overflow-hidden transition-all duration-300 hover:shadow-elegant-lg transform border border-gray-100 mb-8">
            <div class="p-6 md:p-8">
              <div class="text-center mb-8">
                <h1 class="text-2xl font-bold text-dark-900 mb-3 md:text-3xl"><%= result.name %></h1>
                <div class="h-1 w-32 bg-gradient-to-r from-primary-500 to-secondary-500 mx-auto rounded-full mb-2"></div>
              </div>
              
              <div class="grid gap-8 md:grid-cols-2">
                <div class="flex flex-col space-y-2">
                  <h3 class="text-sm font-semibold text-dark-600 uppercase flex items-center mb-2">
                    <div class="w-8 h-8 bg-primary-500/10 rounded-full flex items-center justify-center mr-2">
                      <i class="fas fa-fingerprint text-primary-600"></i>
                    </div>
                    <span>Infohash</span>
                  </h3>
                  <div class="font-mono text-dark-800 break-all select-all bg-gray-50 p-4 rounded-lg border border-gray-200 shadow-inner text-sm">
                    <%= result.infohash %>
                  </div>
                </div>
                
                <div class="flex flex-col space-y-2">
                  <h3 class="text-sm font-semibold text-dark-600 uppercase flex items-center mb-2">
                    <div class="w-8 h-8 bg-primary-500/10 rounded-full flex items-center justify-center mr-2">
                      <i class="fas fa-calendar text-primary-600"></i>
                    </div>
                    <span>Fetched At</span>
                  </h3>
                  <div class="text-dark-800 bg-gray-50 p-4 rounded-lg border border-gray-200 shadow-inner flex items-center gap-2">
                    <i class="fas fa-clock text-primary-500"></i>
                    <span><%= new Date(result.fetchedAt).toLocaleString() %></span>
                  </div>
                </div>
              </div>
              
              <div class="mt-8">
                <div class="flex justify-between items-center mb-4">
                  <h3 class="text-sm font-semibold text-dark-600 uppercase flex items-center">
                    <div class="w-8 h-8 bg-primary-500/10 rounded-full flex items-center justify-center mr-2">
                      <i class="fas fa-folder-open text-primary-600"></i>
                    </div>
                    <span>Files</span>
                  </h3>
                  <div class="flex items-center space-x-4">
                    <button id="collapse-all" class="text-xs bg-primary-50 hover:bg-primary-100 text-primary-700 py-2 px-4 rounded-md transition-colors duration-200 flex items-center border border-primary-100 shadow-sm">
                      <i class="fas fa-compress-alt mr-2 text-primary-500"></i>
                      <span>Collapse All</span>
                    </button>
                    <button id="expand-all" class="text-xs bg-primary-50 hover:bg-primary-100 text-primary-700 py-2 px-4 rounded-md transition-colors duration-200 flex items-center border border-primary-100 shadow-sm">
                      <i class="fas fa-expand-alt mr-2 text-primary-500"></i>
                      <span>Expand All</span>
                    </button>
                  </div>
                </div>
                
                <% 
                  // Transform file paths into a tree structure
                  var fileTree = {};
                  if (Array.isArray(result.files)) {
                    result.files.forEach(filePath => {
                      // Check if we have comma-separated paths instead of slashes
                      const hasCommas = filePath.includes(',');
                      const hasPaths = filePath.includes('/');
                      
                      // Determine the separator to use (prefer slashes if both exist)
                      const separator = hasPaths ? '/' : (hasCommas ? ',' : '/');
                      
                      // Split the file path into directories
                      const parts = filePath.split(separator);
                      let currentLevel = fileTree;
                      
                      // For each part of the path, create nested objects
                      for (let i = 0; i < parts.length; i++) {
                        const part = parts[i].trim();
                        if (part === '') continue;
                        
                        // If this is the last part (file), store as a file
                        if (i === parts.length - 1) {
                          if (!currentLevel.files) currentLevel.files = [];
                          currentLevel.files.push(part);
                        } else {
                          // Otherwise it's a directory
                          if (!currentLevel.dirs) currentLevel.dirs = {};
                          if (!currentLevel.dirs[part]) currentLevel.dirs[part] = {};
                          currentLevel = currentLevel.dirs[part];
                        }
                      }
                    });
                  } else if (typeof result.files === 'string') {
                    // Handle string representation if that's the case
                    const fileArray = result.files.split(',').map(f => f.trim()).filter(f => f);
                    fileArray.forEach(filePath => {
                      // Check if we have path separators
                      const hasSlashes = filePath.includes('/');
                      
                      // If the file already contains slashes, use them as separators
                      // Otherwise, assume this single entry is a file without directories
                      if (hasSlashes) {
                        // Split the file path into directories
                        const parts = filePath.split('/');
                        let currentLevel = fileTree;
                        
                        // For each part of the path, create nested objects
                        for (let i = 0; i < parts.length; i++) {
                          const part = parts[i].trim();
                          if (part === '') continue;
                          
                          // If this is the last part (file), store as a file
                          if (i === parts.length - 1) {
                            if (!currentLevel.files) currentLevel.files = [];
                            currentLevel.files.push(part);
                          } else {
                            // Otherwise it's a directory
                            if (!currentLevel.dirs) currentLevel.dirs = {};
                            if (!currentLevel.dirs[part]) currentLevel.dirs[part] = {};
                            currentLevel = currentLevel.dirs[part];
                          }
                        }
                      } else {
                        // Check for comma-separated directory structure
                        const parts = filePath.split(',');
                        if (parts.length > 1) {
                          // This looks like a comma-separated path
                          let currentLevel = fileTree;
                          
                          for (let i = 0; i < parts.length; i++) {
                            const part = parts[i].trim();
                            if (part === '') continue;
                            
                            // If this is the last part (file), store as a file
                            if (i === parts.length - 1) {
                              if (!currentLevel.files) currentLevel.files = [];
                              currentLevel.files.push(part);
                            } else {
                              // Otherwise it's a directory
                              if (!currentLevel.dirs) currentLevel.dirs = {};
                              if (!currentLevel.dirs[part]) currentLevel.dirs[part] = {};
                              currentLevel = currentLevel.dirs[part];
                            }
                          }
                        } else {
                          // Just a single file without directory structure
                          if (!fileTree.files) fileTree.files = [];
                          fileTree.files.push(filePath);
                        }
                      }
                    });
                  }
                  
                  // Recursive function to render the tree
                  function renderTree(node, path = '', level = 0) {
                    let html = '';
                    const indent = level * 1.5;
                    
                    // Render directories first
                    if (node.dirs) {
                      Object.keys(node.dirs).sort().forEach(dir => {
                        const dirPath = path ? `${path}/${dir}` : dir;
                        html += '<div class="flex items-start py-1 directory" style="padding-left: ' + indent + 'rem; --indent-level: ' + indent + ';">' +
                          '<div class="flex-shrink-0 text-dark-700 mr-2">' +
                            '<i class="fas fa-folder text-primary-500"></i>' +
                          '</div>' +
                          '<div class="font-medium text-dark-700">' + dir + '/</div>' +
                        '</div>';
                        html += renderTree(node.dirs[dir], dirPath, level + 1);
                      });
                    }
                    
                    // Then render files
                    if (node.files) {
                      node.files.sort().forEach(file => {
                        // Determine file type for icon
                        let fileIcon = 'fa-file';
                        let iconColor = 'text-gray-500';
                        
                        const fileExt = file.split('.').pop().toLowerCase();
                        
                        // Video files
                        if (['mp4', 'mkv', 'avi', 'mov', 'wmv', 'flv', 'webm'].includes(fileExt)) {
                          fileIcon = 'fa-file-video';
                          iconColor = 'text-red-500';
                        } 
                        // Audio files
                        else if (['mp3', 'wav', 'ogg', 'flac', 'm4a', 'aac'].includes(fileExt)) {
                          fileIcon = 'fa-file-audio';
                          iconColor = 'text-blue-500';
                        } 
                        // Image files
                        else if (['jpg', 'jpeg', 'png', 'gif', 'bmp', 'svg', 'webp'].includes(fileExt)) {
                          fileIcon = 'fa-file-image';
                          iconColor = 'text-green-500';
                        } 
                        // Archive files
                        else if (['zip', 'rar', '7z', 'tar', 'gz', 'bz2'].includes(fileExt)) {
                          fileIcon = 'fa-file-archive';
                          iconColor = 'text-yellow-500';
                        }
                        // PDF files
                        else if (fileExt === 'pdf') {
                          fileIcon = 'fa-file-pdf';
                          iconColor = 'text-red-600';
                        }
                        // Document files
                        else if (['doc', 'docx', 'txt', 'rtf', 'odt'].includes(fileExt)) {
                          fileIcon = 'fa-file-alt';
                          iconColor = 'text-blue-600';
                        }
                        // Code or text files
                        else if (['js', 'py', 'java', 'c', 'cpp', 'h', 'cs', 'php', 'html', 'css', 'xml', 'json', 'md', 'csv', 'log'].includes(fileExt)) {
                          fileIcon = 'fa-file-code';
                          iconColor = 'text-purple-600';
                        }
                        // Executable files
                        else if (['exe', 'dll', 'bat', 'sh', 'app', 'dmg', 'deb', 'rpm'].includes(fileExt)) {
                          fileIcon = 'fa-cog';
                          iconColor = 'text-gray-600';
                        }
                        
                        html += '<div class="flex items-start py-1" style="padding-left: ' + indent + 'rem; --indent-level: ' + indent + ';">' +
                          '<div class="flex-shrink-0 mr-2 ' + iconColor + '">' +
                            '<i class="fas ' + fileIcon + '"></i>' +
                          '</div>' +
                          '<div class="text-dark-600">' + file + '</div>' +
                        '</div>';
                      });
                    }
                    
                    return html;
                  }
                %>
                <div class="bg-gray-50 rounded-lg p-5 overflow-auto max-h-96 text-sm border border-gray-200 shadow-inner">
                  <% if (Object.keys(fileTree).length > 0) { %>
                    <style>
                      .directory-tree .flex.items-start {
                        transition: background-color 0.2s ease;
                        border-radius: 0.25rem;
                        margin-bottom: 0.125rem;
                        position: relative;
                      }
                      .directory-tree .flex.items-start:hover {
                        background-color: rgba(156, 163, 175, 0.1);
                      }
                      .directory-tree .folder-toggle {
                        cursor: pointer;
                        z-index: 1;
                      }
                      .directory-tree .folder-icon {
                        transition: transform 0.2s ease, color 0.2s ease;
                      }
                      .directory-tree .folder-toggle:hover .folder-icon {
                        transform: scale(1.1);
                      }
                      .directory-item {
                        transition: all 0.3s ease;
                        transform-origin: top left;
                        max-height: 50px; /* Default height for items */
                        overflow: hidden;
                      }
                      .directory-item.collapsed {
                        max-height: 0;
                        opacity: 0;
                        margin-top: 0 !important;
                        margin-bottom: 0 !important;
                        padding-top: 0 !important;
                        padding-bottom: 0 !important;
                        transform: translateY(-5px);
                        pointer-events: none;
                      }
                      
                      /* Define a group container for folder contents */
                      .folder-contents {
                        overflow: hidden;
                        transition: max-height 0.3s cubic-bezier(0.4, 0, 0.2, 1), 
                                   opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                        max-height: 9999px; /* Large enough to contain contents */
                        opacity: 1;
                        position: relative;
                      }
                      .folder-contents.collapsed {
                        max-height: 0;
                        opacity: 0;
                        margin: 0;
                        padding: 0;
                      }
                      
                      /* Add visual feedback effect when expanding/collapsing */
                      @keyframes pulse {
                        0% { background-color: transparent; }
                        50% { background-color: rgba(59, 130, 246, 0.08); }
                        100% { background-color: transparent; }
                      }
                      .folder-toggle.active {
                        animation: pulse 0.6s ease;
                      }
                      
                      /* Make folder icons rotate slightly when toggling */
                      .folder-icon {
                        transition: transform 0.3s ease;
                      }
                      .fa-folder-open {
                        transform: rotateZ(-5deg);
                      }
                      .fa-folder {
                        transform: rotateZ(0);
                      }
                      
                      /* Tree lines for better visual hierarchy */
                      .directory-tree .flex.items-start::before {
                        content: '';
                        position: absolute;
                        top: 0;
                        bottom: 0;
                        left: calc(var(--indent-level, 0.5) * 1rem - 0.75rem);
                        width: 1px;
                        background-color: rgba(209, 213, 219, 0.6);
                      }
                      .directory-tree .flex.items-start::after {
                        content: '';
                        position: absolute;
                        top: 1rem;
                        left: calc(var(--indent-level, 0.5) * 1rem - 0.75rem);
                        width: 0.75rem;
                        height: 1px;
                        background-color: rgba(209, 213, 219, 0.6);
                      }
                      /* Don't show vertical line for last items */
                      .directory-tree .flex.items-start:last-child::before,
                      .directory-tree .flex.items-start.last-at-level::before {
                        height: 1rem;
                      }
                      /* Don't show lines for root items */
                      .directory-tree > .flex.items-start::before,
                      .directory-tree > .flex.items-start::after {
                        display: none;
                      }
                    </style>
                    
                    <div class="directory-tree">
                      <%- renderTree(fileTree) %>
                    </div>
                    
                    <script>
                      // Add interactive folder expansion/collapse
                      document.addEventListener('DOMContentLoaded', function() {
                        // Start with all folders open
                        const folderIcons = document.querySelectorAll('.directory-tree .fa-folder');
                        
                        folderIcons.forEach(icon => {
                          // Convert to open folder icon initially
                          icon.classList.remove('fa-folder');
                          icon.classList.add('fa-folder-open');
                          
                          const folderDiv = icon.closest('.flex.items-start');
                          if (folderDiv) {
                            // Add class for styling
                            folderDiv.classList.add('folder-toggle');
                            icon.classList.add('folder-icon');
                            
                            // Get all direct children until the next folder at the same level
                            const allItems = Array.from(document.querySelectorAll('.directory-tree .flex.items-start'));
                            const folderIndex = allItems.indexOf(folderDiv);
                            const folderLevel = parseFloat(folderDiv.style.paddingLeft) || 0;
                            
                            // Find all descendant elements (with greater padding/indent)
                            const childElements = [];
                            let folderContents = document.createElement('div');
                            folderContents.className = 'folder-contents';
                            
                            // Insert the container after the folder
                            folderDiv.insertAdjacentElement('afterend', folderContents);
                            
                            for (let i = folderIndex + 1; i < allItems.length; i++) {
                              const currentElement = allItems[i];
                              const currentLevel = parseFloat(currentElement.style.paddingLeft) || 0;
                              
                              // If we've returned to the same or lower level, we're done with this folder's children
                              if (currentLevel <= folderLevel) {
                                break;
                              }
                              
                              // Add class for animation
                              currentElement.classList.add('directory-item');
                              childElements.push(currentElement);
                              
                              // Move this element into the folder-contents div
                              folderContents.appendChild(currentElement);
                            }
                            
                            // Click handler to toggle visibility
                            folderDiv.addEventListener('click', function(e) {
                              e.stopPropagation(); // Prevent parent folder click events
                              
                              // Add a visual feedback animation
                              folderDiv.classList.add('active');
                              setTimeout(() => folderDiv.classList.remove('active'), 600);
                              
                              // Toggle between folder and folder-open icons
                              const folderIcon = folderDiv.querySelector('.fa-folder, .fa-folder-open');
                              const isClosing = folderIcon.classList.contains('fa-folder-open');
                              
                              // Toggle the container's collapsed state
                              folderContents.classList.toggle('collapsed', isClosing);
                              
                              if (isClosing) {
                                folderIcon.classList.remove('fa-folder-open');
                                folderIcon.classList.add('fa-folder');
                                
                                // When closing, find and collapse all nested folders too
                                const nestedFolderContainers = folderContents.querySelectorAll('.folder-contents:not(.collapsed)');
                                const nestedFolderIcons = folderContents.querySelectorAll('.fa-folder-open');
                                
                                nestedFolderContainers.forEach(container => {
                                  container.classList.add('collapsed');
                                });
                                
                                nestedFolderIcons.forEach(icon => {
                                  icon.classList.remove('fa-folder-open');
                                  icon.classList.add('fa-folder');
                                });
                              } else {
                                folderIcon.classList.remove('fa-folder');
                                folderIcon.classList.add('fa-folder-open');
                              }
                              
                              // Update tree lines after toggling visibility
                              setTimeout(updateTreeLines, 300);
                            });
                          }
                        });
                        
                        // Add a helper function to ensure tree line consistency
                        function updateTreeLines() {
                          const allItems = document.querySelectorAll('.directory-tree .flex.items-start');
                          allItems.forEach(item => {
                            // If this item is the last visible child at its level, add a class
                            const level = parseFloat(item.style.paddingLeft) || 0;
                            const isCollapsed = item.classList.contains('collapsed');
                            
                            if (!isCollapsed) {
                              // Find the next visible sibling at same level
                              let nextSiblingAtSameLevel = null;
                              let current = item.nextElementSibling;
                              
                              while (current) {
                                const currentLevel = parseFloat(current.style.paddingLeft) || 0;
                                const isCurrentCollapsed = current.classList.contains('collapsed');
                                
                                if (currentLevel < level) {
                                  // We've gone back up the tree, no more siblings
                                  break;
                                } else if (currentLevel === level && !isCurrentCollapsed) {
                                  nextSiblingAtSameLevel = current;
                                  break;
                                }
                                
                                current = current.nextElementSibling;
                              }
                              
                              // If no visible siblings at same level, this is the last one
                              item.classList.toggle('last-at-level', !nextSiblingAtSameLevel);
                            }
                          });
                        }
                        
                        // Initial update
                        updateTreeLines();
                        
                        // Setup collapse all / expand all buttons
                        const collapseAllBtn = document.getElementById('collapse-all');
                        const expandAllBtn = document.getElementById('expand-all');
                        
                        collapseAllBtn.addEventListener('click', function(e) {
                          e.preventDefault();
                          const folderToggles = document.querySelectorAll('.directory-tree .folder-toggle');
                          folderToggles.forEach(folder => {
                            const folderIcon = folder.querySelector('.fa-folder-open');
                            if (folderIcon) {
                              folder.click();
                            }
                          });
                        });
                        
                        expandAllBtn.addEventListener('click', function(e) {
                          e.preventDefault();
                          const folderToggles = document.querySelectorAll('.directory-tree .folder-toggle');
                          folderToggles.forEach(folder => {
                            const folderIcon = folder.querySelector('.fa-folder');
                            if (folderIcon) {
                              folder.click();
                            }
                          });
                        });
                      });
                    </script>
                  <% } else { %>
                    <div class="text-dark-500 italic">No file information available.</div>
                  <% } %>
                </div>
              </div>
              
              <div class="mt-10 flex flex-col md:flex-row justify-center md:justify-between items-center gap-4">
                <a class="flex items-center py-3 px-6 bg-gradient-to-r from-primary-500 to-primary-600 text-white font-medium rounded-lg shadow-sm transition-all duration-300 hover:shadow-md hover:-translate-y-1 transform hover:from-primary-600 hover:to-primary-700"
                   href="<%= result.magnet + trackers %>" 
                   target="_blank">
                  <i class="fas fa-magnet mr-2"></i>
                  <span>Download via Magnet URI</span>
                </a>
                
                <a class="flex items-center py-3 px-6 bg-gray-100 text-dark-700 font-medium rounded-lg shadow-sm transition-all duration-300 hover:shadow-md hover:bg-gray-200" 
                   href="javascript:history.back()">
                  <i class="fas fa-arrow-left mr-2"></i>
                  <span>Go Back</span>
                </a>
              </div>
              
              <% if (timer) { %>
                <div class="text-center mt-8">
                  <p class="text-sm text-dark-500 bg-white inline-block py-2 px-4 rounded-full shadow-sm border border-gray-100">
                    <i class="fas fa-bolt text-yellow-500 mr-2"></i>
                    <span>Query time: </span>
                    <span class="font-medium"><%= timer %> ms</span>
                  </p>
                </div>
              <% } %>
            </div>
          </div>
        </div>
      </div>
    </main>
    
    <%- include('includes/footer') %>
  </body>
</html> 