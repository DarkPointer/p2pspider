<!DOCTYPE html>
<html lang="en">
  <%- include('includes/header') %>
  <body class="bg-gradient-to-br from-gray-50 to-gray-100 min-h-screen flex flex-col">
    <%- include('includes/navbar') %>

    <main class="flex-grow animate-fadeIn">
      <div class="container mx-auto px-4 py-12">
        <div class="max-w-3xl mx-auto text-center">
          <h1 id="counter" class="text-5xl font-bold mb-12 tracking-tight relative md:text-6xl">
            <span class="inline-block bg-clip-text text-transparent bg-gradient-to-r from-primary-500 to-secondary-500 font-display relative">
              Loading<span class="animate-pulse">...</span>
              <div class="absolute h-1 w-3/4 bg-gradient-to-r from-primary-500 to-secondary-500 opacity-50 bottom-0 left-1/2 rounded-full"
                   style="transform: translateX(-50%)">
              </div>
            </span>
          </h1>
          
          <form class="mb-12 search-form transition-all duration-300 transform"
                action="/search">
            <div class="relative max-w-xl mx-auto transition-all duration-300 group">
              <input class="search-input w-full h-16 shadow-elegant rounded-full focus:ring-2 focus:ring-primary-500 focus:outline-none pl-14 pr-14 py-4 text-lg transition-all duration-300 bg-white/80 backdrop-blur"
                     placeholder="Search for magnets..." 
                     id="search" 
                     type="search" 
                     name="q"
                     autocomplete="off">
              <div class="absolute left-5 top-1/2 transition-all duration-300 group-hover:text-primary-500"
                   style="transform: translateY(-50%)">
                <i class="fas fa-search text-gray-400 text-xl"></i>
              </div>
              <div class="absolute right-4 top-1/2 transform -translate-y-1/2">
                <button type="submit"
                        class="text-white bg-gradient-to-r from-primary-500 to-secondary-500 rounded-full w-10 h-10 flex items-center justify-center transition-all duration-300 hover:scale-110 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                  <i class="fas fa-arrow-right text-lg"></i>
                </button>
              </div>
            </div>
          </form>
          
          <div class="bg-white rounded-xl shadow-elegant overflow-hidden transition-all duration-500 hover:shadow-elegant-lg transform hover:-translate-y-1 max-w-2xl mx-auto relative group">
            <!-- Background gradient overlay animation -->
            <div class="absolute inset-0 bg-gradient-to-r from-primary-500/5 to-secondary-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
            
            <div class="p-8 relative z-10">
              <h2 class="text-2xl font-bold text-dark-800 mb-6 flex items-center justify-center">
                <i class="fas fa-info-circle text-primary-500 mr-3"></i>
                <span class="bg-clip-text text-transparent bg-gradient-to-r from-dark-800 to-dark-700">About</span>
              </h2>
              <p class="text-dark-600 text-lg leading-relaxed">
                This is a database of magnet URIs that have been spotted in the wild 
                on the DHT swarm via the BitTorrent protocol.
              </p>
              
              <ul class="mt-6 space-y-5">
                <li class="flex items-start transition-all duration-300 transform hover:translate-x-1">
                  <div class="flex-shrink-0 bg-gradient-to-br from-primary-100 to-primary-200 rounded-full p-1.5 mt-1 mr-3 shadow-sm">
                    <i class="fas fa-check text-primary-600"></i>
                  </div>
                  <div class="text-dark-700">Real-time DHT crawling and indexing of BitTorrent magnet links</div>
                </li>
                <li class="flex items-start transition-all duration-300 transform hover:translate-x-1">
                  <div class="flex-shrink-0 bg-gradient-to-br from-primary-100 to-primary-200 rounded-full p-1.5 mt-1 mr-3 shadow-sm">
                    <i class="fas fa-check text-primary-600"></i>
                  </div>
                  <div class="text-dark-700">Fast search through millions of magnets with advanced filtering</div>
                </li>
                <li class="flex items-start transition-all duration-300 transform hover:translate-x-1">
                  <div class="flex-shrink-0 bg-gradient-to-br from-primary-100 to-primary-200 rounded-full p-1.5 mt-1 mr-3 shadow-sm">
                    <i class="fas fa-check text-primary-600"></i>
                  </div>
                  <div class="text-dark-700">Constantly updated with latest discoveries from the DHT network</div>
                </li>
              </ul>
              
              <div class="mt-8 bg-gray-50 p-4 rounded-lg border border-gray-200 shadow-inner">
                <div class="flex items-center text-sm text-dark-600 font-medium">
                  <i class="fas fa-bolt text-yellow-500 mr-2 animate-pulse"></i>
                  <span>Live updates via WebSocket connection</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>

    <%- include('includes/footer') %>

    <script>
      // Hide elements momentarily until styles are fully loaded
      document.addEventListener('DOMContentLoaded', function() {
        document.body.classList.add('ready');
      });
      
      // WebSocket connection for real-time updates
      let wsAddress = "<%= wsServerAddress %>";
      
      // Make sure WebSocket address has proper protocol
      if (!wsAddress.startsWith('ws')) {
        wsAddress = wsAddress.replace(/^http/, 'ws');
        if (!wsAddress.startsWith('ws')) {
          wsAddress = `ws://${wsAddress}`;
        }
      }
      
      console.log('Connecting to WebSocket server at:', wsAddress);
      const ws = new WebSocket(wsAddress);
      let currentCount = 0;

      ws.onmessage = (event) => {
        const data = JSON.parse(event.data);
        const counter = document.getElementById('counter');
        
        // Handle different message types
        if (data.eventType === 'new_magnet') {
          // Display new magnet notification
          displayNewMagnetNotification(data.data);
          
          // Use the server's count instead of incrementing locally
          if (data.data && data.data.count !== undefined) {
            currentCount = data.data.count;
            updateCounterWithPulse(counter, currentCount);
          }
        } else if (data.count !== undefined) {
          // Regular count update
          currentCount = data.count;
          updateCounter(counter, currentCount);
        }
      };
      
      // Function to update the counter
      function updateCounter(counterElement, count) {
        if (!counterElement) return;
        
        if (count === undefined) {
          // If no count provided, just remove the loading animation
          counterElement.classList.remove('animate-pulse');
          return;
        }
        
        counterElement.innerHTML = `
          <span class="inline-block bg-clip-text text-transparent bg-gradient-to-r from-primary-600 to-secondary-600 font-bold font-display relative">
            ${count.toLocaleString()}
            <span class="text-gray-700 font-normal"> magnets indexed</span>
            <div class="absolute h-1 w-3/4 bg-gradient-to-r from-primary-500 to-secondary-500 opacity-50 bottom-0 left-1/2 rounded-full"
                 style="transform: translateX(-50%)">
            </div>
          </span>
        `;
        
        counterElement.classList.remove('animate-pulse');
      }
      
      // Function to update counter with pulse animation
      function updateCounterWithPulse(counterElement, count) {
        if (!counterElement) return;
        
        updateCounter(counterElement, count);
        
        // Add and then remove pulse animation
        counterElement.classList.add('scale-105', 'text-primary-600');
        setTimeout(() => {
          counterElement.classList.remove('scale-105', 'text-primary-600');
        }, 300);
      }
      
      // Track active notifications for stacking
      let activeNotifications = 0;
      
      // Function to display a notification for new magnets
      function displayNewMagnetNotification(magnetData) {
        if (!magnetData) return;
        
        // Create unique ID for this notification
        const notificationId = `toast-${Date.now()}`;
        
        // Calculate position based on active notifications
        const bottomPosition = 16 + (activeNotifications * 64); // 4rem (16px) base + 4rem (64px) per notification
        activeNotifications++;
        
        // Create notification element
        const notification = document.createElement('div');
        notification.id = notificationId;
        notification.className = 'fixed right-4 flex items-center w-auto p-3 text-sm bg-white rounded-lg shadow-sm border border-gray-100 text-gray-600 dark:border-gray-700 dark:text-gray-300 dark:bg-gray-800 transform translate-y-2 opacity-0 transition-all duration-300 ease-in-out';
        notification.setAttribute('role', 'alert');
        notification.style.zIndex = '50';
        notification.style.bottom = `${bottomPosition}px`;
        notification.style.maxWidth = '280px';
        
        const truncatedName = magnetData.name.length > 32
          ? magnetData.name.substring(0, 32) + '...' 
          : magnetData.name;
          
        notification.innerHTML = `
          <div class="inline-flex items-center justify-center flex-shrink-0 w-6 h-6 text-primary-500 bg-primary-100 rounded-full dark:bg-primary-800/30 dark:text-primary-300">
            <i class="fas fa-magnet text-xs"></i>
          </div>
          <div class="ml-2 mr-2 flex-1 overflow-hidden">
            <div class="text-xs font-medium">New magnet</div>
            <div class="text-xs truncate">${truncatedName}</div>
          </div>
          <button type="button" class="-mr-1 text-gray-400 hover:text-gray-900 rounded-lg p-1 inline-flex items-center justify-center h-6 w-6 dark:text-gray-500 dark:hover:text-white">
            <span class="sr-only">Close</span>
            <svg class="w-2.5 h-2.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
            </svg>
          </button>
        `;
        
        // Add to document
        document.body.appendChild(notification);
        
        // Fade in
        setTimeout(() => {
          notification.classList.add('opacity-100', 'translate-y-0');
          notification.classList.remove('translate-y-2');
        }, 100);
        
        // Add click handler to close button
        const closeButton = notification.querySelector('button');
        closeButton.addEventListener('click', () => {
          removeNotification(notificationId);
        });
        
        // Auto-remove after 5 seconds
        setTimeout(() => {
          removeNotification(notificationId);
        }, 5000);
      }
      
      // Function to remove a notification and reposition others
      function removeNotification(notificationId) {
        const notification = document.getElementById(notificationId);
        if (!notification) return;
        
        // Fade out animation
        notification.classList.remove('opacity-100');
        notification.classList.add('translate-y-2', 'opacity-0');
        
        // After animation, remove the element and reposition others
        setTimeout(() => {
          notification.remove();
          activeNotifications--;
          
          // Reposition remaining notifications
          const notifications = document.querySelectorAll('[id^="toast-"]');
          notifications.forEach((notif, index) => {
            const bottomPosition = 16 + (index * 64);
            notif.style.bottom = `${bottomPosition}px`;
          });
        }, 300);
      }

      ws.onopen = () => {
        console.log('WebSocket connection established.');
      };

      ws.onerror = (error) => {
        console.error('WebSocket Error:', error);
        const counter = document.getElementById('counter');
        counter.innerHTML = `
          <span class="text-red-500">
            <i class="fas fa-exclamation-triangle mr-2"></i>
            Server not responding
          </span>
        `;
      };
    </script>
  </body>
</html> 