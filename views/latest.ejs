<!DOCTYPE html>
<html lang="en">
  <%- include('includes/header') %>
  <link rel="stylesheet" href="public/css/directory-tree.css">
  <body class="bg-gradient-to-br from-gray-50 to-gray-100 min-h-screen flex flex-col">
    <%- include('includes/navbar') %>
    
    <main class="flex-grow">
      <div class="container mx-auto px-4 py-8">
        <% if (typeof pagesdebug !== 'undefined') { %>
          <pre class="bg-dark-800 text-gray-200 p-4 rounded-lg overflow-x-auto text-sm mb-8 font-mono shadow-md"><%= pagesdebug %></pre>
        <% } %>

        <div class="max-w-5xl mx-auto mb-10">
          <div class="text-center mb-8">
            <h1 class="text-3xl font-bold text-dark-800 mb-4 flex items-center justify-center md:text-4xl">
              <i class="fas fa-clock text-primary-500 mr-3"></i>
              <span class="bg-clip-text text-transparent bg-gradient-to-r from-dark-800 to-dark-700 font-display">Latest Discoveries</span>
            </h1>
            <p class="text-lg text-dark-600 max-w-2xl mx-auto">
              Fresh magnet links discovered from the BitTorrent DHT network in real-time
            </p>
          </div>
        </div>

        <% if (typeof results !== 'undefined' && results.length > 0) { %>
          <div id="latest-container" 
               class="max-w-5xl mx-auto space-y-6"
               data-is-first-page="<%= typeof pages === 'undefined' || (typeof pages !== 'undefined' && pages.current === 0) ? 'true' : 'false' %>"
               data-trackers="<%= trackers %>">
            <% results.forEach(function(item) { %>
              <div class="bg-white rounded-xl shadow-elegant overflow-hidden transition-all duration-300 hover:shadow-elegant-lg border border-gray-100 group relative">
                <!-- Pulse indicator for new items -->
                <div class="absolute top-4 right-4 flex items-center">
                  <span class="animate-ping absolute h-3 w-3 rounded-full bg-primary-400 opacity-75"></span>
                  <span class="relative rounded-full h-3 w-3 bg-primary-500"></span>
                </div>
                
                <div class="p-6 md:p-8">
                  <div class="flex justify-between items-start mb-4">
                    <h2 class="text-xl font-bold text-dark-900 break-words group-hover:text-primary-600 transition-colors duration-300 pr-10"><%= item.name %></h2>
                  </div>
                  
                  <div class="flex flex-wrap items-center text-sm font-medium text-dark-500 mb-4 gap-2">
                    <span class="bg-gray-100 rounded-md px-2 py-1 font-mono">Infohash:</span>
                    <span class="select-all font-mono bg-gray-50 px-2 py-1 rounded text-dark-600 border border-gray-200 text-xs md:text-sm"><%= item.infohash %></span>
                  </div>
                  
                  <% if (item.fileTree && Object.keys(item.fileTree).length > 0) { %>
                    <div class="bg-gray-50 rounded-lg p-4 mb-4 overflow-hidden text-sm border border-gray-200 shadow-inner">
                      <div class="directory-tree" data-infohash="<%= item.infohash %>">
                        <%- item.treeHtml %>
                      </div>
                      <% if (item.hasMoreFiles) { %>
                        <div class="text-xs text-right mt-1 text-primary-600">
                          <a href="/infohash?q=<%= item.infohash %>">
                            <i class="fas fa-ellipsis-h mr-1"></i>
                            <% if (item.moreFilesCount) { %>
                              <%= item.moreFilesCount %> more files...
                            <% } else { %>
                              More files...
                            <% } %>
                          </a>
                        </div>
                      <% } %>
                    </div>
                  <% } else if (item.filestring) { %>
                    <div class="bg-gray-50 rounded-lg p-4 mb-4 overflow-hidden text-sm text-dark-700 font-mono border border-gray-200 shadow-inner">
                      <pre class="whitespace-pre-wrap break-words"><%= item.filestring %></pre>
                      <% if (item.hasMoreFiles) { %>
                        <div class="text-xs text-right mt-1 text-primary-600">
                          <a href="/infohash?q=<%= item.infohash %>">More files...</a>
                        </div>
                      <% } %>
                    </div>
                  <% } %>
                  
                  <div class="flex flex-wrap justify-between items-center gap-4 mt-6">
                    <a class="flex items-center transition-all duration-300 py-2.5 px-5 bg-primary-500 hover:bg-primary-600 text-white font-medium rounded-lg shadow-sm hover:shadow-md"
                       href="/infohash?q=<%= item.infohash %>">
                      <i class="fas fa-info-circle mr-2"></i>
                      <span>View Details</span>
                    </a>
                    <a class="flex items-center transition-all duration-300 py-2.5 px-5 bg-dark-700 hover:bg-dark-800 text-white font-medium rounded-lg shadow-sm hover:shadow-md"
                       href="<%= item.magnet + trackers %>">
                      <i class="fas fa-magnet mr-2 text-primary-500"></i>
                      <span>Magnet URI</span>
                    </a>
                  </div>
                </div>
              </div>
            <% }); %>
          </div>
        <% } %>

        <% if (typeof timer !== 'undefined') { %>
          <div class="text-center mt-8">
            <p class="text-sm text-dark-500 bg-white inline-block py-2 px-4 rounded-full shadow-sm border border-gray-100">
              <i class="fas fa-bolt text-yellow-500 mr-2"></i>
              <span>Query time:</span>
              <span class="font-medium ml-1"><%= timer %> ms</span>
            </p>
          </div>
        <% } %>
      </div>
    </main>

    <%- include('includes/footer') %>
    <script src="public/js/directory-tree.js"></script>

    <script>
      document.addEventListener('DOMContentLoaded', function() {
        // Lazy load the WebSocket connection with a slight delay
        // This helps the page render first before establishing WebSocket
        setTimeout(function() {
          initializeWebSocket();
        }, 1000);
        
        function initializeWebSocket() {
          // Only connect websocket on page 0 (latest page)
          const container = document.getElementById('latest-container');
          if (!container || container.dataset.isFirstPage !== 'true') {
            return;
          }
          
          // Get WebSocket address
          const wsAddress = "<%= wsServerAddress %>";
          
          // Make sure WebSocket address has proper protocol
          let wsProtocolFixed = wsAddress;
          if (!wsAddress.startsWith('ws')) {
            wsProtocolFixed = wsAddress.replace(/^http/, 'ws');
            if (!wsProtocolFixed.startsWith('ws')) {
              wsProtocolFixed = `ws://${wsAddress}`;
            }
          }
          
          console.log('Connecting to WebSocket server at:', wsProtocolFixed);
          const ws = new WebSocket(wsProtocolFixed);
  
          ws.onmessage = function(event) {
            const data = JSON.parse(event.data);
            
            // Handle new magnet event
            if (data.eventType === 'new_magnet') {
              addNewMagnetToList(data.data);
            }
          };
  
          ws.onopen = function() {
            console.log('WebSocket connection established for Latest page.');
          };
  
          ws.onerror = function(error) {
            console.error('WebSocket Error:', error);
          };
        }
        
        // Function to add a new magnet to the top of the list
        function addNewMagnetToList(magnetData) {
          if (!magnetData || !magnetData.name) return;
          
          const container = document.getElementById('latest-container');
          if (!container) return;
          
          // Get page info from data attributes
          const isFirstPage = container.dataset.isFirstPage === 'true';
          const trackers = container.dataset.trackers || '';
          
          // Only add if we're on the first page (latest discoveries)
          if (isFirstPage) {
            // Create new magnet element
            const newElement = document.createElement('div');
            newElement.className = 'bg-white rounded-xl shadow-elegant overflow-hidden transition-all duration-300 hover:shadow-elegant-lg border border-gray-100 group relative new-magnet';
            newElement.style.opacity = '0';
            newElement.style.transform = 'translateY(-20px)';
            newElement.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
            
            // Format files for display (if any)
            let filesHtml = '';
            if (magnetData.files) {
              // Basic format of files for display
              let fileString = typeof magnetData.files === 'string' ? magnetData.files : magnetData.files.join(',');
              let formatString = fileString.split(',').join('\n');
              if (formatString.length > 100) {
                formatString = formatString.substring(0, 100) + '...';
              }
              
              // Create simple files display - we'll initialize the tree after insertion
              filesHtml = `
                <div class="bg-gray-50 rounded-lg p-4 mb-4 overflow-hidden text-sm border border-gray-200 shadow-inner">
                  <div class="directory-tree" data-infohash="${magnetData.infohash}">
                    <div class="placeholder">Loading directory structure...</div>
                  </div>
                </div>
              `;
            }
            
            // Populate the HTML content
            newElement.innerHTML = `
              <div class="absolute top-4 right-4 flex items-center">
                <span class="animate-ping absolute h-3 w-3 rounded-full bg-primary-400 opacity-75"></span>
                <span class="relative rounded-full h-3 w-3 bg-primary-500"></span>
              </div>
              
              <div class="p-6 md:p-8">
                <div class="flex justify-between items-start mb-4">
                  <h2 class="text-xl font-bold text-dark-900 break-words group-hover:text-primary-600 transition-colors duration-300 pr-10">${magnetData.name}</h2>
                </div>
                
                <div class="flex flex-wrap items-center text-sm font-medium text-dark-500 mb-4 gap-2">
                  <span class="bg-gray-100 rounded-md px-2 py-1 font-mono">Infohash:</span>
                  <span class="select-all font-mono bg-gray-50 px-2 py-1 rounded text-dark-600 border border-gray-200 text-xs md:text-sm">${magnetData.infohash}</span>
                </div>
                
                ${filesHtml}
                
                <div class="flex flex-wrap justify-between items-center gap-4 mt-6">
                  <a class="flex items-center transition-all duration-300 py-2.5 px-5 bg-primary-500 hover:bg-primary-600 text-white font-medium rounded-lg shadow-sm hover:shadow-md"
                     href="/infohash?q=${magnetData.infohash}">
                    <i class="fas fa-info-circle mr-2"></i>
                    <span>View Details</span>
                  </a>
                  <a class="flex items-center transition-all duration-300 py-2.5 px-5 bg-dark-700 hover:bg-dark-800 text-white font-medium rounded-lg shadow-sm hover:shadow-md"
                     href="magnet:?xt=urn:btih:${magnetData.infohash}${trackers}">
                    <i class="fas fa-magnet mr-2 text-primary-500"></i>
                    <span>Magnet URI</span>
                  </a>
                </div>
              </div>
            `;
            
            // Add to the top of the container
            if (container.firstChild) {
              container.insertBefore(newElement, container.firstChild);
            } else {
              container.appendChild(newElement);
            }
            
            // Initialize directory tree for this new element
            if (magnetData.files) {
              try {
                const directoryTreeContainer = newElement.querySelector('.directory-tree');
                if (directoryTreeContainer) {
                  // Limit files display - similar to server-side logic
                  const fileLimit = 10; // Match the server-side limit
                  const allFiles = Array.isArray(magnetData.files) ? magnetData.files : magnetData.files.split(',').map(f => f.trim()).filter(f => f);
                  const hasMoreFiles = allFiles.length > fileLimit;
                  const moreFilesCount = hasMoreFiles ? allFiles.length - fileLimit : 0;
                  
                  // Only display limited files for tree rendering
                  const limitedFiles = hasMoreFiles ? allFiles.slice(0, fileLimit) : allFiles;
                  const treeHtml = renderFileTreeForUI(limitedFiles);
                  
                  directoryTreeContainer.innerHTML = treeHtml;
                  
                  // Add "more files" link if needed
                  if (hasMoreFiles) {
                    const moreFilesDiv = document.createElement('div');
                    moreFilesDiv.className = 'text-xs text-right mt-1 text-primary-600';
                    moreFilesDiv.innerHTML = `
                      <a href="/infohash?q=${magnetData.infohash}">
                        <i class="fas fa-ellipsis-h mr-1"></i>
                        ${moreFilesCount} more files...
                      </a>
                    `;
                    directoryTreeContainer.appendChild(moreFilesDiv);
                  }
                  
                  // Initialize the tree after a short delay
                  setTimeout(() => {
                    initializeTreesInElement(newElement);
                  }, 100);
                }
              } catch (e) {
                console.error('Error initializing file tree:', e);
              }
            }
            
            // Trigger animation
            setTimeout(function() {
              newElement.style.opacity = '1';
              newElement.style.transform = 'translateY(0)';
            }, 50);
            
            // Remove oldest item if we have too many
            const items = container.querySelectorAll('.shadow-elegant');
            if (items.length > 15) { // Match the pageSize in controller
              container.removeChild(items[items.length - 1]);
            }
          }
        }
        
        // Function to render a file tree for UI display
        function renderFileTreeForUI(filePaths) {
          // Simple but limited implementation for client-side use
          if (!filePaths || filePaths.length === 0) return '';
          
          const fileTree = {};
          const files = Array.isArray(filePaths) ? filePaths : filePaths.split(',').map(f => f.trim()).filter(f => f);
          
          files.forEach(filePath => {
            // Check if we have comma-separated paths instead of slashes
            const hasCommas = filePath.includes(',');
            const hasPaths = filePath.includes('/');
            const separator = hasPaths ? '/' : (hasCommas ? ',' : '/');
            
            // Create a simplified directory structure
            const parts = filePath.split(separator);
            let currentLevel = fileTree;
            
            for (let i = 0; i < parts.length; i++) {
              const part = parts[i].trim();
              if (part === '') continue;
              
              if (i === parts.length - 1) {
                // File
                if (!currentLevel.files) currentLevel.files = [];
                currentLevel.files.push(part);
              } else {
                // Directory
                if (!currentLevel.dirs) currentLevel.dirs = {};
                if (!currentLevel.dirs[part]) currentLevel.dirs[part] = {};
                currentLevel = currentLevel.dirs[part];
              }
            }
          });
          
          // Render the tree structure (simplified version)
          return renderTreeToHtml(fileTree);
        }
        
        // Helper function to render tree to HTML
        function renderTreeToHtml(node, level = 0) {
          let html = '';
          const indent = level * 1.5;
          
          // Directories first
          if (node.dirs) {
            Object.keys(node.dirs).sort().forEach(dir => {
              html += '<div class="flex items-start py-1 directory" style="padding-left: ' + indent + 'rem; --indent-level: ' + indent + ';">' +
                '<div class="flex-shrink-0 text-dark-700 mr-2">' +
                  '<i class="fas fa-folder text-primary-500"></i>' +
                '</div>' +
                '<div class="font-medium text-dark-700">' + dir + '/</div>' +
              '</div>';
              html += renderTreeToHtml(node.dirs[dir], level + 1);
            });
          }
          
          // Then files
          if (node.files) {
            node.files.sort().forEach(file => {
              let fileIcon = 'fa-file';
              let iconColor = 'text-gray-500';
              
              const fileExt = file.split('.').pop().toLowerCase();
              
              // File type icons - simplified version for client-side
              if (['mp4', 'mkv', 'avi', 'mov'].includes(fileExt)) {
                fileIcon = 'fa-file-video';
                iconColor = 'text-red-500';
              } else if (['mp3', 'wav', 'ogg'].includes(fileExt)) {
                fileIcon = 'fa-file-audio';
                iconColor = 'text-blue-500';
              } else if (['jpg', 'jpeg', 'png', 'gif'].includes(fileExt)) {
                fileIcon = 'fa-file-image';
                iconColor = 'text-green-500';
              } else if (['zip', 'rar', 'tar', 'gz'].includes(fileExt)) {
                fileIcon = 'fa-file-archive';
                iconColor = 'text-yellow-500';
              }
              
              html += '<div class="flex items-start py-1" style="padding-left: ' + indent + 'rem; --indent-level: ' + indent + ';">' +
                '<div class="flex-shrink-0 mr-2 ' + iconColor + '">' +
                  '<i class="fas ' + fileIcon + '"></i>' +
                '</div>' +
                '<div class="text-dark-600">' + file + '</div>' +
              '</div>';
            });
          }
          
          return html;
        }
        
        // Function to initialize trees in a specific element
        function initializeTreesInElement(element) {
          const directoryTrees = element.querySelectorAll('.directory-tree');
          directoryTrees.forEach(tree => {
            const folderIcons = tree.querySelectorAll('.fa-folder');
            
            folderIcons.forEach(icon => {
              // Convert to open folder icon initially
              icon.classList.remove('fa-folder');
              icon.classList.add('fa-folder-open');
              
              const folderDiv = icon.closest('.flex.items-start');
              if (folderDiv) {
                folderDiv.classList.add('folder-toggle');
                icon.classList.add('folder-icon');
                
                // Handle child elements
                handleFolderToggle(folderDiv, tree);
              }
            });
          });
        }
        
        // Helper for folder toggle functionality
        function handleFolderToggle(folderDiv, treeContainer) {
          const allItems = Array.from(treeContainer.querySelectorAll('.flex.items-start'));
          const folderIndex = allItems.indexOf(folderDiv);
          const folderLevel = parseFloat(folderDiv.style.paddingLeft) || 0;
          
          // Create container for children
          let folderContents = document.createElement('div');
          folderContents.className = 'folder-contents';
          folderDiv.insertAdjacentElement('afterend', folderContents);
          
          // Find child elements
          const childElements = [];
          for (let i = folderIndex + 1; i < allItems.length; i++) {
            const currentElement = allItems[i];
            const currentLevel = parseFloat(currentElement.style.paddingLeft) || 0;
            
            if (currentLevel <= folderLevel) break;
            
            currentElement.classList.add('directory-item');
            childElements.push(currentElement);
            folderContents.appendChild(currentElement);
          }
          
          // Click handler
          folderDiv.addEventListener('click', function(e) {
            e.stopPropagation();
            
            folderDiv.classList.add('active');
            setTimeout(() => folderDiv.classList.remove('active'), 600);
            
            const folderIcon = folderDiv.querySelector('.fa-folder, .fa-folder-open');
            const isClosing = folderIcon.classList.contains('fa-folder-open');
            
            folderContents.classList.toggle('collapsed', isClosing);
            
            if (isClosing) {
              folderIcon.classList.remove('fa-folder-open');
              folderIcon.classList.add('fa-folder');
              
              // Close nested folders
              const nestedContainers = folderContents.querySelectorAll('.folder-contents:not(.collapsed)');
              const nestedIcons = folderContents.querySelectorAll('.fa-folder-open');
              
              nestedContainers.forEach(c => c.classList.add('collapsed'));
              nestedIcons.forEach(i => {
                i.classList.remove('fa-folder-open');
                i.classList.add('fa-folder');
              });
            } else {
              folderIcon.classList.remove('fa-folder');
              folderIcon.classList.add('fa-folder-open');
            }
          });
        }
      });
    </script>
  </body>
</html> 